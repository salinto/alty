_G.AutofarmSettings = {
    ["AttackMode"] = "2",
    ["Fps"] = "10",
    ["Codes"] = {
        "ExampleCode1", 
        "ExampleCode2"
    }, 
    ["Webhook"] = "https://discord.com/api/webhooks/1230945277905473547/_Lqiea21Z-HUeon5FdmC7y6qe8iV_gyRSCcvCW3zlBsy0a_meh8rPK2zP40oTz2SCNlx",
    ["LogInterval"] = "10",
    ["Credits"] = "iku autofarm - by @trans"
}

loadstring(game:HttpGet("https://github.com/applless/RandomScripts/raw/main/IkuAutofarm"))()

local gameId = 2788229376
local groupId = 8068202
local lastRejoinTime = 0
local rejoinCooldown = 0 -- 30 seconds cooldown for rejoin

local player = game.Players.LocalPlayer

local function getTimestamp()
    return os.date("%Y-%m-%d %H:%M:%S", os.time())
end

local function toCurrency(value)
    return "$" .. tostring(value):reverse():gsub("%d%d%d", "%1,"):gsub(",$", ""):reverse()
end

local function sendLog(message)
    local link = _G.AutofarmSettings.Webhook
    if link ~= "" then
        local data = {
            ["content"] = "",
            ["embeds"] = {{
                ["title"] = "**Autofarm Execution Debrainers**",
                ["description"] = message,
                ["color"] = tonumber(0x2B6BE4),
                ["footer"] = { ["text"] = "Timestamp: " .. getTimestamp() },
                ["fields"] = {
                    {["name"] = "Wallet:", ["value"] = toCurrency(player.DataFolder.Currency.Value), ["inline"] = true}
                }
            }}
        }
        local http_request = syn and syn.request or http_request
        http_request({
            Url = link, 
            Body = game:GetService("HttpService"):JSONEncode(data), 
            Method = "POST", 
            Headers = {["content-type"] = "application/json"}
        })
    end
end

sendLog("Executed by: " .. player.Name)

local function getCashiers()
    local validCashiers = {}
    for _, v in pairs(workspace.Cashiers:GetChildren()) do
        if v.Humanoid.Health > 0 then
            table.insert(validCashiers, v)
        end
    end
    return #validCashiers
end

-- Server hopping script with player count targeting ~20 players starts here
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end

    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end

    local targetPlayerCount = 20
    local tolerance = 5 -- Allows slight flexibility in player count
    local num = 0

    for i, v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        local playerCount = tonumber(v.playing)
        local maxPlayers = tonumber(v.maxPlayers)
        
        if maxPlayers > playerCount then
            for _, Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end

            if Possible and playerCount >= targetPlayerCount - tolerance and playerCount <= targetPlayerCount + tolerance then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
                break
            end
        end
    end
end

local Hop = function()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end
-- Server hopping script ends here

local function rejoin()
    if os.time() - lastRejoinTime > rejoinCooldown then
        lastRejoinTime = os.time()
        sendLog("Rejoining due to low HP. Executed by: " .. player.Name)
        game:GetService("TeleportService"):Teleport(gameId)
    end
end

local function checkGroupPlayers()
    for _, p in pairs(game.Players:GetPlayers()) do
        if p:IsInGroup(groupId) then
            sendLog("admin/star/media in server\nserver hopping!!")
            Hop()
            break
        end
    end
end

game.Players.PlayerAdded:Connect(function(p)
    if p:IsInGroup(groupId) then
        sendLog("admin/star/media in server\nserver hopping!!")
        Hop()
    end
end)

game:GetService("Players").LocalPlayer.OnTeleport:Connect(function(teleportState)
    if teleportState == Enum.TeleportState.Failed then
        task.wait(2)
        sendLog("Teleport failed. Retrying server hop.")
        Hop()
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    if not game:IsLoaded() or game:GetService("NetworkClient") == nil then
        sendLog("Disconnected from network. Server hopping.")
        Hop()
    end
end)

spawn(function()
    while task.wait(1) do
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.Health < 100 then
                Hop()
            elseif getCashiers() <= 0 then
                Hop()
            end
        end
    end
end)

spawn(function()
    while task.wait(5) do
        checkGroupPlayers()
    end
end)

spawn(function()
    while true do
        task.wait(300)
        Hop()
    end
end)
